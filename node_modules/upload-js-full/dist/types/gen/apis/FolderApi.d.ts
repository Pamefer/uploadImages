/**
 * upload-api
 * Upload API
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: hello@upload.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from "../runtime";
import type { AsyncResponse, CopyFolderBatchRequest, CopyFolderRequest, DeleteFolderBatchRequest, DeleteFolderRequest, FolderDetails, ListFolderResponse, PutFolderRequest } from "../models";
export interface CopyFolderOperationParams {
    accountId: string;
    copyFolderRequest: CopyFolderRequest;
}
export interface CopyFolderBatchOperationParams {
    accountId: string;
    copyFolderBatchRequest: CopyFolderBatchRequest;
}
export interface DeleteFolderOperationParams {
    accountId: string;
    deleteFolderRequest: DeleteFolderRequest;
}
export interface DeleteFolderBatchOperationParams {
    accountId: string;
    deleteFolderBatchRequest: DeleteFolderBatchRequest;
}
export interface GetFolderDetailsParams {
    accountId: string;
    folderPath: string;
}
export interface ListFolderParams {
    accountId: string;
    folderPath: string;
    cursor?: string;
    dryRun?: boolean;
    includeFiles?: boolean;
    includeOverriddenStorage?: boolean;
    includePhysicalFolders?: boolean;
    includeVirtualFolders?: boolean;
    limit?: number;
    recursive?: boolean;
}
export interface PutFolderOperationParams {
    accountId: string;
    putFolderRequest: PutFolderRequest;
}
/**
 *
 */
export declare class FolderApi extends runtime.BaseAPI {
    /**
     * Copies a folder asynchronously.  You can use ListFolder to preview the operation: set `dryRun=true` with ```recursive```, ```includeFiles```, ```includeOverriddenStorage``` and ```includeVirtualFolders``` set to match the values you\'re using here. Leave all other flags unset.
     */
    private copyFolderWithHttpInfo;
    /**
     * Copies a folder asynchronously.  You can use ListFolder to preview the operation: set `dryRun=true` with ```recursive```, ```includeFiles```, ```includeOverriddenStorage``` and ```includeVirtualFolders``` set to match the values you\'re using here. Leave all other flags unset.
     */
    copyFolder(requestParameters: CopyFolderOperationParams, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AsyncResponse>;
    /**
     * Copies multiple folders asynchronously.  You can use ListFolder to preview the operation: set `dryRun=true` with ```recursive```, ```includeFiles```, ```includeOverriddenStorage``` and ```includeVirtualFolders``` set to match the values you\'re using here. Leave all other flags unset.
     */
    private copyFolderBatchWithHttpInfo;
    /**
     * Copies multiple folders asynchronously.  You can use ListFolder to preview the operation: set `dryRun=true` with ```recursive```, ```includeFiles```, ```includeOverriddenStorage``` and ```includeVirtualFolders``` set to match the values you\'re using here. Leave all other flags unset.
     */
    copyFolderBatch(requestParameters: CopyFolderBatchOperationParams, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AsyncResponse>;
    /**
     * Deletes a folder asynchronously.  If the folder has overridden storage settings, then no files will be deleted.  You can use ListFolder to preview the operation: set `dryRun=true` with ```recursive```, ```includeFiles``` and ```includeVirtualFolders``` set to match the values you\'re using here. Leave all other flags unset.
     */
    private deleteFolderWithHttpInfo;
    /**
     * Deletes a folder asynchronously.  If the folder has overridden storage settings, then no files will be deleted.  You can use ListFolder to preview the operation: set `dryRun=true` with ```recursive```, ```includeFiles``` and ```includeVirtualFolders``` set to match the values you\'re using here. Leave all other flags unset.
     */
    deleteFolder(requestParameters: DeleteFolderOperationParams, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AsyncResponse>;
    /**
     * Deletes multiple folders asynchronously.  If the folder has overridden storage settings, then no files will be deleted.  You can use ListFolder to preview the operation: set `dryRun=true` with ```recursive```, ```includeFiles``` and ```includeVirtualFolders``` set to match the values you\'re using here. Leave all other flags unset.
     */
    private deleteFolderBatchWithHttpInfo;
    /**
     * Deletes multiple folders asynchronously.  If the folder has overridden storage settings, then no files will be deleted.  You can use ListFolder to preview the operation: set `dryRun=true` with ```recursive```, ```includeFiles``` and ```includeVirtualFolders``` set to match the values you\'re using here. Leave all other flags unset.
     */
    deleteFolderBatch(requestParameters: DeleteFolderBatchOperationParams, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AsyncResponse>;
    /**
     * Gets the full details (e.g. permission, storage layer, etc.) for a folder.  Returns an empty object if no settings have been configured for this folder.
     */
    private getFolderDetailsWithHttpInfo;
    /**
     * Gets the full details (e.g. permission, storage layer, etc.) for a folder.  Returns an empty object if no settings have been configured for this folder.
     */
    getFolderDetails(requestParameters: GetFolderDetailsParams, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FolderDetails>;
    /**
     * Lists the folder\'s contents.  The result may be paginated: subsequent pages can be requested by passing the ```cursor``` from the response into the ```cursor``` request parameter.  Pagination is complete when the response includes `isPaginationComplete=true`.
     */
    private listFolderWithHttpInfo;
    /**
     * Lists the folder\'s contents.  The result may be paginated: subsequent pages can be requested by passing the ```cursor``` from the response into the ```cursor``` request parameter.  Pagination is complete when the response includes `isPaginationComplete=true`.
     */
    listFolder(requestParameters: ListFolderParams, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListFolderResponse>;
    /**
     * Creates or updates the folder specified by the `folderPath`.  If the folder\'s ancestors do not exist, they will be created automatically (with empty FolderSettings).  Note: you don\'t need to create folders before uploading files to them.
     */
    private putFolderWithHttpInfo;
    /**
     * Creates or updates the folder specified by the `folderPath`.  If the folder\'s ancestors do not exist, they will be created automatically (with empty FolderSettings).  Note: you don\'t need to create folders before uploading files to them.
     */
    putFolder(requestParameters: PutFolderOperationParams, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FolderDetails>;
}
