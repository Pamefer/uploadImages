import { FileDetails } from "../gen";
import { UploadManagerParams } from "./Model";
export declare class UploadManager {
    private readonly configuration;
    private readonly stringMimeType;
    private readonly defaultMaxConcurrentUploadParts;
    private readonly uploadApi;
    constructor(configuration?: import("../gen").Configuration);
    upload(request: UploadManagerParams): Promise<FileDetails>;
    private checkIfCancelled;
    private beginUpload;
    private uploadPart;
    /**
     * Returns etag for the part.
     */
    private putUploadPart;
    private coerceRequestBody;
    private makeRequestBody;
    private bufferToStream;
    /**
     * Only expected to be called in Node.js environments, and as such, we can assume 'BlobLike' is not a DOM 'File' object.
     */
    private blobToBuffer;
    private sliceDataForRequest;
    private isNodeJs;
    private getUploadPart;
    private calculateSize;
    private calculateMime;
    private calculateOriginalFileName;
    private calculateMaxConcurrency;
    private getChunkedStream;
    private foldData;
    private foldDataRaw;
    private processUploadSource;
    private stringToBlob;
    private globalBlob;
    private nodeJsBlob;
    private mapAsync;
}
